// Generated by rust-peg. Do not edit.
#![allow(non_snake_case, unused)]
use super::{Description, Clause, Rule, Sentence, Term, Literal, Constant,
            Variable, Function, Relation, Proposition, Not, Or, Distinct};
use super::Clause::{RuleClause, SentenceClause};
use super::Sentence::{PropSentence, RelSentence};
use super::Literal::{NotLit, OrLit, DistinctLit, RelLit, PropLit};
use super::Term::{FuncTerm, VarTerm, ConstTerm};
use self::RuleResult::{Matched, Failed};
fn escape_default(s: &str) -> String {
    s.chars().flat_map(|c| c.escape_default()).collect()
}
fn char_range_at(s: &str, pos: usize) -> (char, usize) {
    let c = &s[pos..].chars().next().unwrap();
    let next_pos = pos + c.len_utf8();
    (*c, next_pos)
}
enum RuleResult<T> { Matched(usize, T), Failed, }
struct ParseState {
    max_err_pos: usize,
    expected: ::std::collections::HashSet<&'static str>,
}
#[derive(PartialEq, Eq, Debug, Clone)]
pub struct ParseError {
    pub line: usize,
    pub column: usize,
    pub offset: usize,
    pub expected: ::std::collections::HashSet<&'static str>,
}
pub type ParseResult<T> = Result<T, ParseError>;
impl ::std::fmt::Display for ParseError {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter)
     -> ::std::result::Result<(), ::std::fmt::Error> {
        try!(write ! (
             fmt , "error at {}:{}: expected " , self . line , self . column
             ));
        if self.expected.len() == 1 {
            try!(write ! (
                 fmt , "`{}`" , escape_default (
                 self . expected . iter (  ) . next (  ) . unwrap (  ) ) ));
        } else {
            let mut iter = self.expected.iter();
            try!(write ! (
                 fmt , "one of `{}`" , escape_default (
                 iter . next (  ) . unwrap (  ) ) ));
            for elem in iter {
                try!(write ! ( fmt , ", `{}`" , escape_default ( elem ) ));
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for ParseError {
    fn description(&self) -> &str { "parse error" }
}
impl ParseState {
    fn new() -> ParseState {
        ParseState{max_err_pos: 0,
                   expected: ::std::collections::HashSet::new(),}
    }
    fn mark_failure(&mut self, pos: usize, expected: &'static str)
     -> RuleResult<()> {
        if pos > self.max_err_pos {
            self.max_err_pos = pos;
            self.expected.clear();
        }
        if pos == self.max_err_pos { self.expected.insert(expected); }
        Failed
    }
}
fn slice_eq(input: &str, state: &mut ParseState, pos: usize, m: &'static str)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let l = m.len();
    if input.len() >= pos + l &&
           &input.as_bytes()[pos..pos + l] == m.as_bytes() {
        Matched(pos + l, ())
    } else { state.mark_failure(pos, m) }
}
fn slice_eq_case_insensitive(input: &str, state: &mut ParseState, pos: usize,
                             m: &'static str) -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    let mut used = 0usize;
    let mut input_iter = input[pos..].chars().flat_map(|x| x.to_uppercase());
    for m_char_upper in m.chars().flat_map(|x| x.to_uppercase()) {
        used += m_char_upper.len_utf8();
        let input_char_result = input_iter.next();
        if input_char_result.is_none() ||
               input_char_result.unwrap() != m_char_upper {
            return state.mark_failure(pos, m);
        }
    }
    Matched(pos + used, ())
}
fn any_char(input: &str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    #![inline]
    #![allow(dead_code)]
    if input.len() > pos {
        let (_, next) = char_range_at(input, pos);
        Matched(next, ())
    } else { state.mark_failure(pos, "<character>") }
}
fn pos_to_line(input: &str, pos: usize) -> (usize, usize) {
    let mut remaining = pos;
    let mut lineno: usize = 1;
    for line in input.lines() {
        let line_length = line.len() + 1;
        if remaining < line_length { return (lineno, remaining + 1); }
        remaining -= line_length;
        lineno += 1;
    }
    return (lineno, remaining + 1);
}
fn parse_description<'input>(input: &'input str, state: &mut ParseState,
                             pos: usize) -> RuleResult<Description> {
    {
        let start_pos = pos;
        {
            let seq_res = parse___(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_clause(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, clauses) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            { Description::new(clauses) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_clause<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<Clause> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_rule(input, state, pos);
                    match seq_res {
                        Matched(pos, r) => {
                            {
                                let match_str = &input[start_pos..pos];
                                Matched(pos, { RuleClause(r) })
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_sentence(input, state, pos);
                    match seq_res {
                        Matched(pos, s) => {
                            {
                                let match_str = &input[start_pos..pos];
                                Matched(pos, { SentenceClause(s) })
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_rule<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<Rule> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_lparen(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_rule_tok(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let seq_res =
                                        parse_sentence(input, state, pos);
                                    match seq_res {
                                        Matched(pos, head) => {
                                            {
                                                let seq_res =
                                                    {
                                                        let mut repeat_pos =
                                                            pos;
                                                        let mut repeat_value =
                                                            vec!();
                                                        loop  {
                                                            let pos =
                                                                repeat_pos;
                                                            let step_res =
                                                                parse_literal(input,
                                                                              state,
                                                                              pos);
                                                            match step_res {
                                                                Matched(newpos,
                                                                        value)
                                                                => {
                                                                    repeat_pos
                                                                        =
                                                                        newpos;
                                                                    repeat_value.push(value);
                                                                }
                                                                Failed => {
                                                                    break ;
                                                                }
                                                            }
                                                        }
                                                        Matched(repeat_pos,
                                                                repeat_value)
                                                    };
                                                match seq_res {
                                                    Matched(pos, body) => {
                                                        {
                                                            let seq_res =
                                                                parse_rparen(input,
                                                                             state,
                                                                             pos);
                                                            match seq_res {
                                                                Matched(pos,
                                                                        _) =>
                                                                {
                                                                    {
                                                                        let match_str =
                                                                            &input[start_pos..pos];
                                                                        Matched(pos,
                                                                                {
                                                                                    Rule::new(head,
                                                                                              body)
                                                                                })
                                                                    }
                                                                }
                                                                Failed =>
                                                                Failed,
                                                            }
                                                        }
                                                    }
                                                    Failed => Failed,
                                                }
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_sentence<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<Sentence> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_prop_lit(input, state, pos);
                    match seq_res {
                        Matched(pos, l) => {
                            {
                                let match_str = &input[start_pos..pos];
                                Matched(pos,
                                        {
                                            match l {
                                                PropLit(p) => PropSentence(p),
                                                _ =>
                                                panic!("Expected a PropLit, got {:?}"
                                                       , l),
                                            }
                                        })
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let start_pos = pos;
                {
                    let seq_res = parse_lparen(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    parse_rel_lit(input, state, pos);
                                match seq_res {
                                    Matched(pos, l) => {
                                        {
                                            let seq_res =
                                                parse_rparen(input, state,
                                                             pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos,
                                                                {
                                                                    match l {
                                                                        RelLit(p)
                                                                        =>
                                                                        RelSentence(p),
                                                                        _ =>
                                                                        panic!("Expected a RelLit, got {:?}"
                                                                               ,
                                                                               l),
                                                                    }
                                                                })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            }
        }
    }
}
fn parse_literal<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<Literal> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_lparen(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    {
                                        let choice_res =
                                            parse_or_lit(input, state, pos);
                                        match choice_res {
                                            Matched(pos, value) =>
                                            Matched(pos, value),
                                            Failed => {
                                                let choice_res =
                                                    parse_not_lit(input,
                                                                  state, pos);
                                                match choice_res {
                                                    Matched(pos, value) =>
                                                    Matched(pos, value),
                                                    Failed => {
                                                        let choice_res =
                                                            parse_distinct_lit(input,
                                                                               state,
                                                                               pos);
                                                        match choice_res {
                                                            Matched(pos,
                                                                    value) =>
                                                            Matched(pos,
                                                                    value),
                                                            Failed =>
                                                            parse_rel_lit(input,
                                                                          state,
                                                                          pos),
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, l) => {
                                        {
                                            let seq_res =
                                                parse_rparen(input, state,
                                                             pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos, { l })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => parse_prop_lit(input, state, pos),
        }
    }
}
fn parse_not_lit<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<Literal> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_not_tok(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_literal(input, state, pos);
                        match seq_res {
                            Matched(pos, l) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            { NotLit(Not::new(Box::new(l))) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_or_lit<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<Literal> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_or_tok(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_literal(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, lits) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos, { OrLit(Or::new(lits)) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_distinct_lit<'input>(input: &'input str, state: &mut ParseState,
                              pos: usize) -> RuleResult<Literal> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_distinct_tok(input, state, pos);
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_term(input, state, pos);
                        match seq_res {
                            Matched(pos, t1) => {
                                {
                                    let seq_res =
                                        parse_term(input, state, pos);
                                    match seq_res {
                                        Matched(pos, t2) => {
                                            {
                                                let match_str =
                                                    &input[start_pos..pos];
                                                Matched(pos,
                                                        {
                                                            DistinctLit(Distinct::new(t1,
                                                                                      t2))
                                                        })
                                            }
                                        }
                                        Failed => Failed,
                                    }
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_prop_lit<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<Literal> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_constant(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { PropLit(Proposition::new(name)) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_rel_lit<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<Literal> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_constant(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_term(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, args) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            {
                                                RelLit(Relation::new(name,
                                                                     args))
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_term<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<Term> {
    {
        let choice_res =
            {
                let start_pos = pos;
                {
                    let seq_res = parse_lparen(input, state, pos);
                    match seq_res {
                        Matched(pos, _) => {
                            {
                                let seq_res =
                                    parse_func_term(input, state, pos);
                                match seq_res {
                                    Matched(pos, t) => {
                                        {
                                            let seq_res =
                                                parse_rparen(input, state,
                                                             pos);
                                            match seq_res {
                                                Matched(pos, _) => {
                                                    {
                                                        let match_str =
                                                            &input[start_pos..pos];
                                                        Matched(pos, { t })
                                                    }
                                                }
                                                Failed => Failed,
                                            }
                                        }
                                    }
                                    Failed => Failed,
                                }
                            }
                        }
                        Failed => Failed,
                    }
                }
            };
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_var_term(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => parse_const_term(input, state, pos),
                }
            }
        }
    }
}
fn parse_func_term<'input>(input: &'input str, state: &mut ParseState,
                           pos: usize) -> RuleResult<Term> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_constant(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_term(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                Matched(repeat_pos, repeat_value)
                            };
                        match seq_res {
                            Matched(pos, args) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            {
                                                FuncTerm(Function::new(name,
                                                                       args))
                                            })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_var_term<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<Term> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "?");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let seq_res = parse_constant(input, state, pos);
                        match seq_res {
                            Matched(pos, name) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos,
                                            { VarTerm(Variable::new(name)) })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_const_term<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<Term> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_constant(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { ConstTerm(name) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_constant<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<Constant> {
    {
        let start_pos = pos;
        {
            let seq_res = parse_ident(input, state, pos);
            match seq_res {
                Matched(pos, name) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { Constant::new(name.to_string()) })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_ident<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<String> {
    {
        let start_pos = pos;
        {
            let seq_res =
                {
                    let start_pos = pos;
                    {
                        let seq_res =
                            {
                                let mut repeat_pos = pos;
                                let mut repeat_value = vec!();
                                loop  {
                                    let pos = repeat_pos;
                                    let step_res =
                                        parse_ident_char(input, state, pos);
                                    match step_res {
                                        Matched(newpos, value) => {
                                            repeat_pos = newpos;
                                            repeat_value.push(value);
                                        }
                                        Failed => { break ; }
                                    }
                                }
                                if repeat_value.len() >= 1usize {
                                    Matched(repeat_pos, ())
                                } else { Failed }
                            };
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos, { match_str.to_string() })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                };
            match seq_res {
                Matched(pos, s) => {
                    {
                        let seq_res = parse___(input, state, pos);
                        match seq_res {
                            Matched(pos, _) => {
                                {
                                    let match_str = &input[start_pos..pos];
                                    Matched(pos, { s })
                                }
                            }
                            Failed => Failed,
                        }
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_ident_char<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<char> {
    {
        let choice_res = parse_letter(input, state, pos);
        match choice_res {
            Matched(pos, value) => Matched(pos, value),
            Failed => {
                let choice_res = parse_digit(input, state, pos);
                match choice_res {
                    Matched(pos, value) => Matched(pos, value),
                    Failed => parse_underscore(input, state, pos),
                }
            }
        }
    }
}
fn parse_underscore<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res = slice_eq(input, state, pos, "_");
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.chars().next().unwrap() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_letter<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        'a' ...'z' | 'A' ...'Z' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[a-zA-Z]"),
                    }
                } else { state.mark_failure(pos, "[a-zA-Z]") };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.chars().next().unwrap() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_digit<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<char> {
    {
        let start_pos = pos;
        {
            let seq_res =
                if input.len() > pos {
                    let (ch, next) = char_range_at(input, pos);
                    match ch {
                        '0' ...'9' => Matched(next, ()),
                        _ => state.mark_failure(pos, "[0-9]"),
                    }
                } else { state.mark_failure(pos, "[0-9]") };
            match seq_res {
                Matched(pos, _) => {
                    {
                        let match_str = &input[start_pos..pos];
                        Matched(pos, { match_str.chars().next().unwrap() })
                    }
                }
                Failed => Failed,
            }
        }
    }
}
fn parse_lparen<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "(");
        match seq_res {
            Matched(pos, _) => { parse___(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_rparen<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, ")");
        match seq_res {
            Matched(pos, _) => { parse___(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_rule_tok<'input>(input: &'input str, state: &mut ParseState,
                          pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "<=");
        match seq_res {
            Matched(pos, _) => { parse___(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_not_tok<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "not");
        match seq_res {
            Matched(pos, _) => { parse_kw__(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_or_tok<'input>(input: &'input str, state: &mut ParseState,
                        pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "or");
        match seq_res {
            Matched(pos, _) => { parse_kw__(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_distinct_tok<'input>(input: &'input str, state: &mut ParseState,
                              pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, "distinct");
        match seq_res {
            Matched(pos, _) => { parse_kw__(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse_kw__<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    {
        let seq_res =
            {
                let assert_res = parse_ident_char(input, state, pos);
                match assert_res {
                    Failed => Matched(pos, ()),
                    Matched(..) => Failed,
                }
            };
        match seq_res {
            Matched(pos, _) => { parse___(input, state, pos) }
            Failed => Failed,
        }
    }
}
fn parse___<'input>(input: &'input str, state: &mut ParseState, pos: usize)
 -> RuleResult<()> {
    {
        let mut repeat_pos = pos;
        loop  {
            let pos = repeat_pos;
            let step_res =
                {
                    let choice_res = parse_whitespace(input, state, pos);
                    match choice_res {
                        Matched(pos, value) => Matched(pos, value),
                        Failed => parse_comment(input, state, pos),
                    }
                };
            match step_res {
                Matched(newpos, value) => { repeat_pos = newpos; }
                Failed => { break ; }
            }
        }
        Matched(repeat_pos, ())
    }
}
fn parse_whitespace<'input>(input: &'input str, state: &mut ParseState,
                            pos: usize) -> RuleResult<()> {
    if input.len() > pos {
        let (ch, next) = char_range_at(input, pos);
        match ch {
            ' ' | '\t' | '\n' | '\r' => Matched(next, ()),
            _ => state.mark_failure(pos, "[ \t\n\r]"),
        }
    } else { state.mark_failure(pos, "[ \t\n\r]") }
}
fn parse_comment<'input>(input: &'input str, state: &mut ParseState,
                         pos: usize) -> RuleResult<()> {
    {
        let seq_res = slice_eq(input, state, pos, ";");
        match seq_res {
            Matched(pos, _) => {
                {
                    let mut repeat_pos = pos;
                    loop  {
                        let pos = repeat_pos;
                        let step_res =
                            {
                                let seq_res =
                                    {
                                        let assert_res =
                                            slice_eq(input, state, pos, "\n");
                                        match assert_res {
                                            Failed => Matched(pos, ()),
                                            Matched(..) => Failed,
                                        }
                                    };
                                match seq_res {
                                    Matched(pos, _) => {
                                        any_char(input, state, pos)
                                    }
                                    Failed => Failed,
                                }
                            };
                        match step_res {
                            Matched(newpos, value) => { repeat_pos = newpos; }
                            Failed => { break ; }
                        }
                    }
                    Matched(repeat_pos, ())
                }
            }
            Failed => Failed,
        }
    }
}
pub fn description<'input>(input: &'input str) -> ParseResult<Description> {
    let mut state = ParseState::new();
    match parse_description(input, &mut state, 0) {
        Matched(pos, value) => { if pos == input.len() { return Ok(value) } }
        _ => { }
    }
    let (line, col) = pos_to_line(input, state.max_err_pos);
    Err(ParseError{line: line,
                   column: col,
                   offset: state.max_err_pos,
                   expected: state.expected,})
}
